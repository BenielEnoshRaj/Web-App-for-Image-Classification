# -*- coding: utf-8 -*-
"""model_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x2_57lhyaEZ1nE4yohDZoByJ4wdYpnUZ
"""

import tensorflow as tf
import numpy as np
from tensorflow import keras
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array
from tensorflow.keras.applications.vgg16 import preprocess_input
from PIL import Image
import base64
import io
from flask import Flask
from flask import jsonify
from flask import request

app = Flask(__name__)


def get_model():
  global model
  model = load_model("VGG16_tuned_model.h5")
  print("*model Loaded!")
  print(model.summary())
def preprocess_img( image,target_size):
  if image.mode != "RGB":
    image = image.convert("RGB")
  image = image.resize(target_size)
  image = img_to_array(image)
  image = np.expand_dims(image, axis = 0)
  image = preprocess_input(image)
  return image

print(" * Loading Keras model...")
get_model()

@app.route("/predict", methods = ['POST'])

def predict():
  message = request.get_json(force = True)
  encoded = message['image']
  decoded = base64.b64decode(encoded)
  image = Image.open(io.BytesIO(decoded))

  preprocessed_img = preprocess_img(image,target_size=(224,224))
  prediction = model.predict(preprocessed_img)
  print("prediction",prediction)
  response = {"prediction" : {
      "dog": str(prediction[0][1]),
      "cat": str(prediction[0][0])
      }
  }
  return jsonify(response)
